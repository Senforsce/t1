package visualize

css row() {
	display: flex;
}

css column() {
	flex: 50%;
	overflow-y: scroll;
	max-height: 100vh;
}

css code() {
	font-family: monospace;
}

t1 combine(t1FileName string, left, right t1.Component) {
	<html>
		<head>
			<title>{ t1FileName }- Source Map Visualisation</title>
			<style type="text/css">
				.mapped { background-color: green }
				.highlighted { background-color: yellow }
			</style>
		</head>
		<body>
			<h1>{ t1FileName }</h1>
			<div class={ t1.Classes(row()) }>
				<div class={ t1.Classes(column(), code()) }>
					@left
				</div>
				<div class={ t1.Classes(column(), code()) }>
					@right
				</div>
			</div>
		</body>
	</html>
}

script highlight(sourceId, targetId string) {
        let items = document.getElementsByClassName(sourceId);
	for(let i = 0; i < items.length; i ++) {
		items[i].classList.add("highlighted");
	}
        items = document.getElementsByClassName(targetId);
	for(let i = 0; i < items.length; i ++) {
		items[i].classList.add("highlighted");
	}
}

script removeHighlight(sourceId, targetId string) {
        let items = document.getElementsByClassName(sourceId);
	for(let i = 0; i < items.length; i ++) {
		items[i].classList.remove("highlighted");
	}
        items = document.getElementsByClassName(targetId);
	for(let i = 0; i < items.length; i ++) {
		items[i].classList.remove("highlighted");
	}
}

t1 mappedCharacter(s string, sourceID, targetID string) {
	<span class={ t1.Classes(t1.Class("mapped"), t1.Class(sourceID), t1.Class(targetID)) } onMouseOver={ highlight(sourceID, targetID) } onMouseOut={ removeHighlight(sourceID, targetID) }>{ s }</span>
}
