package testcssusage

import "fmt"

// Constant class.
t1 StyleTagsAreSupported() {
	<style>
	.test {
		color: #ff0000;
	}
	</style>
	<div class="test">Style tags are supported</div>
}

// CSS components.

const red = "#00ff00"

css cssComponentGreen() {
	color: { red };
}

t1 CSSComponentsAreSupported() {
	<div class={ cssComponentGreen() }>CSS components are supported</div>
}

// Both CSS components and constants are supported.
// Only string names are really required. There is no need to use t1.Class or t1.SafeClass.
t1 CSSComponentsAndConstantsAreSupported() {
	<div class={ cssComponentGreen(), "classA", t1.Class("&&&classB"), t1.SafeClass("classC"), "d e" } type="button">Both CSS components and constants are supported</div>
	// The following is also valid, but not required - you can put the class names in directly.
	<div class={ t1.Classes(cssComponentGreen(), "classA", t1.Class("&&&classB"), t1.SafeClass("classC")), "d e" } type="button">Both CSS components and constants are supported</div>
}

// Maps can be used to determine if a class should be added or not.
t1 MapsCanBeUsedToConditionallySetClasses() {
	<div class={ map[string]bool{"a": true, "b": false, "c": true} }>Maps can be used to determine if a class should be added or not.</div>
}

// The t1.KV function can be used to add a class if a condition is true.

css d() {
	font-size: 12pt;
}

css e() {
	font-size: 14pt;
}

t1 KVCanBeUsedToConditionallySetClasses() {
	<div class={ "a", t1.KV("b", false), "c", t1.KV(d(), false), t1.KV(e(), true) }>KV can be used to conditionally set classes.</div>
}

// Pseudo attributes can be used without any special syntax.
t1 PsuedoAttributesAndComplexClassNamesAreSupported() {
	<div class={ "bg-violet-500", "hover:bg-red-600", "hover:bg-sky-700", "text-[#50d71e]", "w-[calc(100%-4rem)" }>Psuedo attributes and complex class names are supported.</div>
}

// Class names are HTML escaped.
t1 ClassNamesAreHTMLEscaped() {
	<div class={ "a\" onClick=\"alert('hello')\"" }>Class names are HTML escaped.</div>
}

// CSS components can be used with arguments.

css loading(percent int) {
	width: { fmt.Sprintf("%d%%", percent) };
}

t1 CSSComponentsCanBeUsedWithArguments() {
	<div class={ loading(50) }>CSS components can be used with arguments.</div>
	<div class={ loading(100) }>CSS components can be used with arguments.</div>
}

// Combine all tests.
t1 TestComponent() {
	@StyleTagsAreSupported()
	@CSSComponentsAreSupported()
	@CSSComponentsAndConstantsAreSupported()
	@MapsCanBeUsedToConditionallySetClasses()
	@KVCanBeUsedToConditionallySetClasses()
	@PsuedoAttributesAndComplexClassNamesAreSupported()
	@ClassNamesAreHTMLEscaped()
	@CSSComponentsCanBeUsedWithArguments()
}
